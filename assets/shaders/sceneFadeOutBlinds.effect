// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md

CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        blur_factor: { value: 0.0 }
        progress: { value: 0.0 }
        blink_level: { value: 0.0 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;

    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>

  const float SLAT_WIDTH = 0.01; 
  const float SQRT_2 = sqrt(2.0);
  const vec2 BLUR_CENTER = vec2(.5, .5);
  const int SAMPLE_COUNT = 6;

  uniform Constants {
    float progress;
    float blink_level;
    float blur_factor;
  };

  in vec4 color;

  vec4 getBlurColor (sampler2D spriteTexture, vec2 uv0) {
    if (blur_factor == 0.0) {
      return CCSampleTexture(spriteTexture, uv0);
    }
    vec2 dir = uv0 - BLUR_CENTER;
    uv0 -= blur_factor * dir * float(SAMPLE_COUNT) / 2.0;
    vec4 outColor = vec4(0, 0, 0, 0);

    for (int i = 0; i < SAMPLE_COUNT; ++i) {
			vec2 uv = uv0 + blur_factor * dir * float(i);

			outColor += CCSampleTexture(spriteTexture, uv);
    }

    return outColor / float(SAMPLE_COUNT);
  }

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      if (progress < 1.0) {
        float t = uv0.t;
        if (mod(floor(t / SLAT_WIDTH), 2.0) == 0.0) {
          float s = uv0.s + progress;
          if (s > 1.0) {
            o = vec4(0, 0, 0, 1);
          } else {
            o *= getBlurColor(cc_spriteTexture, vec2(s, t));
          }
        } else {
          float s = uv0.s - progress;
          if (s < 0.0) {
            o = vec4(0, 0, 0, 1);
          } else {
            o *= getBlurColor(cc_spriteTexture, vec2(s, t));
          }
        }
      } else {
        o = vec4(0, 0, 0, 1);
      }
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    if (blink_level > 0.0) {
      o = vec4(1, 1, 1, 1) * blink_level + o * (1.0 - blink_level);
    }

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
